version: '3.8'

services:
  # Kafka & Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    volumes:
      - kafka-data:/var/lib/kafka/data

  kafka-setup:
    image: confluentinc/cp-kafka:7.3.2 # Use the same image to get kafka-topics.sh
    hostname: kafka-setup
    container_name: kafka-setup2
    depends_on:
      kafka: # Depends on the kafka service itself (not just ZK)
        condition: service_started # Basic check, script will poll for readiness
    command: >
      bash -c "
              echo 'Waiting for Kafka to be ready...'
              # Use Confluent utility to wait for Kafka broker
              cub kafka-ready -b kafka:29092 1 60 && \
              echo 'Kafka is ready!' || \
              (echo 'Timed out waiting for Kafka!' && exit 1)

              echo 'Creating topics...'
              # Common Topics
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user.commands.common --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic account.commands.common --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user.events.common --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic account.events.common --partitions 1 --replication-factor 1 && \
              # Deposit Saga Topics
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic account.commands.deposit --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payment.commands.deposit --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic account.events.deposit --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payment.events.deposit --partitions 1 --replication-factor 1 && \
              # Withdrawal Saga Topics
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic account.commands.withdrawal --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payment.commands.withdrawal --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic account.events.withdrawal --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payment.events.withdrawal --partitions 1 --replication-factor 1 && \
              # Order-Buy Saga Topics
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user.commands.order-buy --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user.events.order-buy --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic account.commands.order-buy --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic account.events.order-buy --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic order.commands.order-buy --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic order.events.order-buy --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic market.commands.order-buy --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic market.events.order-buy --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic broker.commands.order-buy --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic broker.events.order-buy --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic portfolio.commands.order-buy --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic portfolio.events.order-buy --partitions 1 --replication-factor 1 && \
              # Order-Sell Saga Topics
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user.commands.order-sell --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user.events.order-sell --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic account.commands.order-sell --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic account.events.order-sell --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic order.commands.order-sell --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic order.events.order-sell --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic market.commands.order-sell --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic market.events.order-sell --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic broker.commands.order-sell --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic broker.events.order-sell --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic portfolio.commands.order-sell --partitions 1 --replication-factor 1 && \
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic portfolio.events.order-sell --partitions 1 --replication-factor 1 && \
              # Market Data Topic
              kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic market.price.data --partitions 1 --replication-factor 1 && \
              echo 'All topics created successfully!' || echo 'Failed to create some topics.'

              # Keep the container running idly only if needed for debugging, otherwise it will exit
              # sleep infinity
            "

  # Kafka UI for monitoring Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "9090:9090"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      SERVER_PORT: 9090

volumes:
  zookeeper-data:
  kafka-data:


#version: '3.8'
#
#services:
#  # Kafka & Zookeeper
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.3.2
#    hostname: zookeeper
#    container_name: zookeeper
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000 # Basic config, adjust as needed
#    ports:
#      - "2181:2181"
#    volumes:
#      - zookeeper-data:/var/lib/zookeeper/data
#      - zookeeper-log:/var/lib/zookeeper/log # Added log volume
#
#  kafka:
#    image: confluentinc/cp-kafka:7.3.2
#    hostname: kafka
#    container_name: kafka
#    depends_on:
#      - zookeeper
#    ports:
#      # Exposes 9092 for external connections to the broker
#      # Use kafka:29092 for connections within the Docker network
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      # Listeners: PLAINTEXT is for internal Docker network communication, PLAINTEXT_HOST is for host access
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT # For internal cluster communication
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Must be 1 for single broker setup
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0 # Optional: speeds up consumer group initialization in dev
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # Must be 1 for single broker setup
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 # Must be 1 for single broker setup
#      # --- TOPIC CREATION ---
#      # Format: TopicName:Partitions:ReplicationFactor,...
#      # ReplicationFactor MUST be 1 because we only have 1 broker
#      KAFKA_CREATE_TOPICS: "user.commands.common:1:1,\
#                            account.commands.common:1:1,\
#                            user.events.common:1:1,\
#                            account.events.common:1:1,\
#                            account.commands.deposit:1:1,\
#                            payment.commands.deposit:1:1,\
#                            account.events.deposit:1:1,\
#                            payment.events.deposit:1:1,\
#                            user.events:1:1,\
#                            account.commands.withdrawal:1:1,\
#                            payment.commands.withdrawal:1:1,\
#                            account.events.withdrawal:1:1,\
#                            payment.events.withdrawal:1:1"
#      # Set KAFKA_AUTO_CREATE_TOPICS_ENABLE to 'false' for production or if you want strict control
#      # Setting to 'true' allows topics to be created automatically if a producer/consumer requests one that doesn't exist
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false" # Changed to false to rely on explicit creation
#
#    volumes:
#      - kafka-data:/var/lib/kafka/data
#
#  # Kafka UI for monitoring Kafka
#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    depends_on:
#      - kafka
#    ports:
#      - "9090:9090"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
#      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
#      SERVER_PORT: 9090
#
#volumes:
#  zookeeper-data:
#  kafka-data:
