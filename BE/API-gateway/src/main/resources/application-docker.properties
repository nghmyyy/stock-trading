# Server configuration
server.port=8080

# Route configurations for Docker environment
spring.cloud.gateway.routes[0].id=user-service-route
spring.cloud.gateway.routes[0].uri=http://user-service:8081
spring.cloud.gateway.routes[0].predicates[0]=Path=/users/**

spring.cloud.gateway.routes[1].id=account-service-route
spring.cloud.gateway.routes[1].uri=http://account-service:8083
spring.cloud.gateway.routes[1].predicates[0]=Path=/accounts/**

spring.cloud.gateway.routes[2].id=trading-service-route
spring.cloud.gateway.routes[2].uri=http://trading-service:8084
spring.cloud.gateway.routes[2].predicates[0]=Path=/trading/**

spring.cloud.gateway.routes[3].id=kafka-management-service-route
spring.cloud.gateway.routes[3].uri=http://saga-orchestrator-service:8085
spring.cloud.gateway.routes[3].predicates[0]=Path=/sagas/**

spring.cloud.gateway.routes[4].id=market-data-service-route
spring.cloud.gateway.routes[4].uri=http://market-data-service:8088
spring.cloud.gateway.routes[4].predicates[0]=Path=/market-data/**

spring.cloud.gateway.routes[5].id=market_data_websocket
spring.cloud.gateway.routes[5].uri=ws://market-data-service:8088
spring.cloud.gateway.routes[5].predicates[0]=Path=/ws/market-data/**

spring.cloud.gateway.routes[6].id=order-service-route
spring.cloud.gateway.routes[6].uri=http://order-service:8087
spring.cloud.gateway.routes[6].predicates[0]=Path=/orders/**

spring.cloud.gateway.routes[7].id=order_websocket
spring.cloud.gateway.routes[7].uri=ws://order-service:8087
spring.cloud.gateway.routes[7].predicates[0]=Path=/ws/orders/**

spring.cloud.gateway.routes[8].id=portfolio-service-route
spring.cloud.gateway.routes[8].uri=http://portfolio-service:8091
spring.cloud.gateway.routes[8].predicates[0]=Path=/portfolios/**

spring.cloud.gateway.routes[9].id=mock-brokerage-service-route
spring.cloud.gateway.routes[9].uri=http://mock-brokerage-service:8090
spring.cloud.gateway.routes[9].predicates[0]=Path=/brokerage/**

spring.cloud.gateway.globalcors.corsConfigurations[/**].allowedOrigins=*
spring.cloud.gateway.globalcors.corsConfigurations[/**].allowedMethods=*
spring.cloud.gateway.globalcors.corsConfigurations[/**].allowedHeaders=*

spring.cloud.gateway.cache.request-body=true
spring.cloud.gateway.cache.response-body=true

# jwt
jwt.secret=mysuperduperlongsecretkeythatismorethan32bytes

logging.level.org.springframework.cloud.gateway=TRACE


logging.level.org.springframework.data.redis=DEBUG
logging.level.io.lettuce=DEBUG

logging.level.com.project.apigateway.security=DEBUG
logging.level.com.project.apigateway=DEBUG
logging.level.root=INFO


# Redis Configuration (add to your application-local.properties)
redis.host=redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com
redis.port=14694
redis.username=default
redis.password=1Pox3Zq8mQuUsAvzKlvjdCOJE3xxxprJ

# Connection settings
redis.connection.timeout=3000
redis.socket.timeout=3000

# Connection pool settings
redis.pool.max-active=16
redis.pool.max-idle=8
redis.pool.min-idle=4
redis.pool.max-wait=1000

# Cache settings
redis.cache.enabled=true
redis.cache.default-ttl=300
redis.cache.timeout=2000
redis.cache.retry-attempts=3
redis.cache.retry-delay=100
redis.ssl.enabled=false


spring.jackson.serialization.indent_output=true
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss


# Enable Spring Boot Actuator for health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always
management.health.redis.enabled=true

logging.level.com.project.apigateway.filter=DEBUG
